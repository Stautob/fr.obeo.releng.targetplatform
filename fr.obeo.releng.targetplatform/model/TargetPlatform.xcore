@GenModel(prefix="TargetPlatform", modelName="TargetPlatform")
package fr.obeo.releng.targetplatform

import com.google.common.base.Splitter
import java.util.Locale
import org.eclipse.core.runtime.Platform
import org.eclipse.emf.common.util.DelegatingEList$UnmodifiableEList
import org.eclipse.jdt.launching.JavaRuntime

class TargetPlatform {
	boolean compositeElementsResolved = "false"
	String name
	contains TargetContent[] contents opposite targetPlatform  
	refers derived IncludeDeclaration[] includes get {
		new UnmodifiableEList(contents.filter(typeof(IncludeDeclaration)).toList)
	}
	derived Option[] options get {
		new UnmodifiableEList(contents.filter(typeof(Options)).map[options].flatten.toList)
	}
	refers derived Location[] locations get {
		new UnmodifiableEList(contents.filter(typeof(Location)).toList)
	}
	refers derived Environment environment get {
		contents.filter(typeof(Environment)).head
	}
}

interface TargetContent {
	container TargetPlatform targetPlatform opposite contents
}

class Options extends TargetContent {
	Option[] options
}

class Environment extends TargetContent {
	String[] env
	
	derived String operatingSystem get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		return 
			Platform.knownOSValues.findFirst[
				envToUpper.contains(it.toUpperCase)
			]
	}
	
	derived String windowingSystem get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		val knownWSUpperValues = Platform.knownWSValues.map[toUpperCase]
		
		val allWS = envToUpper.filter[
			knownWSUpperValues.contains(it)
		].toList
		
		if (allWS.size <= 1 && allWS.contains(operatingSystem?.toUpperCase)) {
			// case for win32 which is an os and an ws. Let's consider the first one 
			// as the os and the second as ws
			return null
		} else {
			return 
				Platform.knownWSValues.findFirst[
					envToUpper.contains(it.toUpperCase)
				]
		}
	}
	
	derived String architecture get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		return Platform.knownOSArchValues.findFirst[
			envToUpper.contains(it.toUpperCase)
		]
	}
	
	derived Locale localization get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		val locale = Locale.availableLocales.map[toString].findFirst[
			envToUpper.contains(it.toUpperCase)
		]
		
		if (locale != null) {
			var String language = "";
			var String country = "";
			var String variant = "";
	
			val tokens = Splitter.on('_').trimResults.split(locale).iterator;
			if (tokens.hasNext) {
				language = tokens.next
			}
			if (tokens.hasNext) {
				country = tokens.next
			}
			if (tokens.hasNext) {
				variant = tokens.next
			}
	
			return new Locale(language, country, variant);
		} else {
			return null;
		}
	}
	
	derived ExecutionEnvironment executionEnvironment get {
		val eeManager = JavaRuntime.executionEnvironmentsManager
		if (eeManager != null) {
			val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
			
			for (env : envToUpper) {
				val ee = eeManager.executionEnvironments.findFirst[it.id.toUpperCase.equals(env)]
				if (ee != null) {
					return ee
				}
			}
			
			return null
		} else {
			return null
		}
	}
}

class VarDefinition extends TargetContent {
	String name
	String value
}

class CompositeString {
	String name = "composite string"
	contains CompositeStringPart[] stringParts opposite compositeString
	
	op String computeActualString() {
		var result = new String
		for (CompositeStringPart stringPart : stringParts) {
			result += stringPart.actualString
		}
		return result
	}
}

interface CompositeStringPart {
	container CompositeString compositeString opposite stringParts
	
	op String getActualString()
}

class VarCall extends CompositeStringPart, DefinableVersion {
	refers VarDefinition varName

	op String getActualString() {
		return varName.value
	}
	
	op String getActualVersion() {
		return getActualString
	}
}

class StaticString extends CompositeStringPart, DefinableVersion {
	String value
	
	op String getActualString() {
		return value
	}
	
	op String getActualVersion() {
		return getActualString
	}
}

type Locale wraps java.util.Locale
type ExecutionEnvironment wraps org.eclipse.jdt.launching.environments.IExecutionEnvironment

class Location extends TargetContent {
	String ID
	String uri
	contains CompositeString compositeUri
	Option[] options
	contains IU[] ius opposite location
	
	op void resolveComposite() {
		resolveUri
		for (iu : ius) {
			iu.resolveVersion
		}
	}
	
	op void resolveUri() {
		if (uri !== null) {
			return
		}
		uri = compositeUri.computeActualString
	}
}

class IncludeDeclaration extends TargetContent {
	String name = "include declaration"
	contains CompositeString compositeImportURI
	
	String importURI
	
	op void generateImportURI() {
		importURI = compositeImportURI.computeActualString
	}
}

interface DefinableVersion {
	op String getActualVersion()
}

class IU {
	String ID
	String version
	contains DefinableVersion definableVersion
	container Location location opposite ius
	
	op void resolveVersion() {
		if (version !== null) {
			return
		}
		if (definableVersion !== null) {
			version = definableVersion.actualVersion
		}
	}
}

class VersionRange extends DefinableVersion {
	String name = "version range"
	String range
	
	op String getActualVersion() {
		return range
	}
}

enum Option {
	INCLUDE_REQUIRED as 'requirements' = 0 
	INCLUDE_ALL_ENVIRONMENTS as 'allEnvironments' = 1 
	INCLUDE_SOURCE as 'source' = 2
	INCLUDE_CONFIGURE_PHASE as 'configurePhase' = 3
}